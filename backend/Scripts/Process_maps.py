import pandas as pd
import numpy as np
import folium
import json
from pathlib import Path
from ipyleaflet import Map, Choropleth, GeoJSON, WidgetControl
import geopandas as gpd
from shapely.geometry import Polygon, Point
from pyproj import CRS


current_dir = Path(__file__).parent.parent

##Loading files
#Tract boundary geojson file
geojson_path = f'{current_dir}/data/tract_boundaries.json'
with open(geojson_path) as f:
    geojson_data = json.load(f)
geojson_df = gpd.read_file(geojson_path)

#Default score and percentiles generated by process_data.py
dac_data = pd.read_csv(f"{current_dir}/cleaned_data/default_score.csv")
#The full calenviroscreen data table generated by process_data/py
ces_df = pd.read_csv(f"{current_dir}/cleaned_data/cleaned_ces_cdc.csv")
#Shapefile containing CA district boundaries
district_df = gpd.read_file(f"{current_dir}/data/ca_assembly_districts/Assembly_Districts.shp")
#csv containing district party affiliations
party_data = pd.read_csv(f"{current_dir}/data/california_state_assembly_district_parties_03_23.csv")
county_df = gpd.read_file(f"{current_dir}/data/ca_counties/CA_Counties.shp")


#Removing unnecessary columns and adding Leading zero to census tracts (to match GEOjson file)
dac_data.drop(columns=dac_data.columns[2:-3], inplace=True)
dac_data.rename(columns={'Census Tract': "GEOID"}, inplace=True)
def leading_zero(col):
    return '0' + str(col)
dac_data['GEOID'] = dac_data['GEOID'].apply(leading_zero)

#Adding tracts present in the Geojson file but not the DAC classification data as missing values
tracts = [tract['properties']['GEOID'] for tract in geojson_data['features']]
missing_tracts = [tract for tract in tracts if tract not in dac_data['GEOID'].values]

#initializing dataframe for missing tracts
missing_df = pd.DataFrame()
missing_df['GEOID'] = missing_tracts
for col in dac_data.columns[1:]:
    missing_df[col] = np.repeat(None, len(missing_tracts))

#Appending missing tracts to DAC dataframe
dac_data_complete = pd.concat([dac_data, missing_df], ignore_index=True)

#Classifying missing tracts as "missing"
def categorize(col):
    if col == 1:
        return 'Yes'
    elif col == 0:
        return 'No'
    else: 
        return "Missing"
dac_data_complete['DAC'] = dac_data_complete['DAC'].apply(categorize)

polygons = []
tract_ids = []
counties = []
#Adding a DAC and an id element to the geojson file and removing unnecessary properties
#Additionally, reducing polygon size
for tract in geojson_data['features']:
    ID = tract['properties']['GEOID']
    county_code = tract['properties']['COUNTYFP']
    county = county_df.loc[county_df['COUNTYFP'] == county_code]['NAME'].values[0]
    #tract['DAC'] = dac_data_complete.loc[dac_data_complete['GEOID'] == ID]['DAC'].values[0]
    #tract['id'] = ID
    prop = {
        'id': ID,
        'county': county,
        'DAC': dac_data_complete.loc[dac_data_complete['GEOID'] == ID]['DAC'].values[0]
    }
    tract['properties'] = prop
    try:
        def reduce_polygon(poly_list):
            poly_reduced = poly_list[::2]
            return Polygon(poly_reduced)
        poly_complex = Polygon(tract['geometry']['coordinates'][0])
        #polygon_reduced = reduce_polygon(poly_complex)
        #tract['geometry']['coordinates'] = polygon_reduced
    except:
        poly_complex = 'None'
        ID = 'None'
        county = 'None'
    polygons.append(poly_complex)
    tract_ids.append(ID)
    counties.append(county)

#Creating a geo dataframe with census tract areas
polygons_clean = [x for x in polygons if x != 'None']
ids_clean = [x for x in tract_ids if x != 'None']
counties_clean = [x for x in counties if county != 'None']
area_df = gpd.GeoDataFrame(geometry=polygons_clean, crs=CRS.from_epsg(4326))

#Simplifying polygons
tolerance = 0.0005
area_df['geometry'] = area_df['geometry'].simplify(tolerance, preserve_topology=True)

#Creating a geodataframe with geometry, DAC classification, and county name
geojson_df2 = geojson_df[['COUNTYFP', 'GEOID']].copy()
county_df2 = county_df[['COUNTYFP', 'NAME']].copy()
tract_county_merged = geojson_df2.merge(county_df2, how='left', on='COUNTYFP')
tract_county_df = dac_data_complete.merge(tract_county_merged, how='left', on='GEOID').drop(
    columns=['COUNTYFP', 'Score', 'Percentile', 'County']).rename(columns={'NAME': 'County'})
basic_geojson_df = area_df.copy()
basic_geojson_df['id'] = ids_clean
basic_geojson_df = basic_geojson_df.merge(tract_county_df, how='left', left_on='id', right_on='GEOID').drop(columns=['GEOID'])

area_df['GEOID'] = ids_clean
#Converting to a Califoria CRS
area_df = area_df.to_crs(CRS.from_epsg(3310))
area_df['area'] = area_df.area
area_df['area'] = area_df['area'].apply(lambda x: round(x, 2))

def remove_zero(num):
    return int(num[1:])

area_df['GEOID'] = area_df['GEOID'].apply(remove_zero)
dac_data_complete['GEOID'] = dac_data_complete['GEOID'].apply(remove_zero)

#Merging area dataframe with classificaion dataframe
geo_merged = dac_data_complete.merge(area_df, on='GEOID', how='outer').drop(columns=['geometry'])

#Adding population density to calenviroscreen data
ces_df3 = ces_df.merge(geo_merged, left_on='Census Tract', right_on='GEOID', how='left').drop(
    columns=['County_y', 'Score', 'Percentile', 'DAC', 'GEOID', 'County_x']).rename(columns={'California County': 'County'})
ces_df3['Population Density'] = ces_df3['Total Population'] / ces_df3['area'] * 1000

## Adding political affiliation to calenviroscreen data
tract_df = ces_df[['Census Tract', 'Longitude', 'Latitude']]
def make_point(row):
    return Point(row[-2], row[-1])

#Adding (long,lat) gemoetry to ces census tracts
tract_df['geometry'] = tract_df.apply(make_point, axis=1)
tract_df = gpd.GeoDataFrame(tract_df, geometry='geometry', crs="EPSG:4326").drop(columns=['Latitude','Longitude'])
tract_df.to_crs(district_df.crs, inplace=True)

#Classifying census tracts into their corresponding districts
tract_districts = gpd.sjoin(tract_df, district_df, how='left', predicate='within')
def remove_leading_zero(val):
    try:
        if val[0] == '0':
            val = val[1:]
        return val
    except:
        return val
    
party_data['District'] = party_data['District'].apply(str)
tract_districts['GEOID'] = tract_districts['GEOID'].apply(remove_leading_zero)
#Merging census tracts with party affiliation data
tract_districts2 = tract_districts.merge(party_data, left_on='GEOID', right_on='District', 
                      how='left').drop(columns=['index_right','AssemblyAr','District','Assembly_1',
                                                'District','Name', 'AssemblyDi'])
tract_districts = tract_districts.merge(party_data, left_on='GEOID', right_on='District', 
                      how='left').drop(columns=['geometry','index_right','GEOID','AssemblyAr','District','Assembly_1',
                                                'District','Name', 'AssemblyDi'])

ces_df3 = ces_df3.merge(tract_districts, on='Census Tract')

#Saving geojson file
fp = f'{current_dir}/cleaned_data/tract_boundaries.json'
with open(fp, 'w') as file:
    json.dump(geojson_data, file)

#Saving altered dac data file
geo_merged.to_csv(f"{current_dir}/cleaned_data/geo_df.csv", index=False)

#Saving altered calenviroscreen data
ces_df3.to_csv(f"{current_dir}/cleaned_data/cleaned_ces_cdc.csv", index=False)

#Saving geopandas data
basic_geojson_df.to_csv(f"{current_dir}/cleaned_data/geojson_data.csv", index=False)